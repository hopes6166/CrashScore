# The code below changes the name of the level of a factor variable.  It can be used to combine factor levels either to a newly named level or to an existing level.
# The example below creates a new level "NEWLEVEL" and eliminates two existing levels, "OLDLEVEL1" and "OLDLEVEL2". Replace the items in all caps with your choices as needed. Copy and paste as needed.
levels(df$weather)[levels(df$weather) == "fog"] <- "inconvenient"
levels(df$weather)[levels(df$weather) == "rain"] <- "inconvenient"
levels(df$weather)[levels(df$weather) == "snow"] <- "inconvenient"
levels(df$weather)[levels(df$weather) == "sleet"] <- "inconvenient"
levels(df$weather)[levels(df$weather) == "partly-cloudy-day"] <- "partly-cloudy"
levels(df$weather)[levels(df$weather) == "partly-cloudy-night"] <- "partly-cloudy"
levels(df$weather)[levels(df$weather) == "clear-day"] <- "clear"
levels(df$weather)[levels(df$weather) == "clear-night"] <- "clear"
levels(df$weather)[levels(df$weather) == "wind"] <- "cloudy"
# Look at them once you are done.
ggplot(df, aes(x = weather)) +
geom_bar()
ggplot(df, aes(x = weekday)) +
geom_bar()
# Define three different versions of the hour variable
# hour_1 is a numeric integer variable from 6am to 10pm (10pm = 22)
df$hour_1 <- df$hour
# hour_2 is a factor variable with levels from 6am to 10pm (10pm = 22)
df$hour_2 <- as.factor(df$hour)
# hour_3 is a numeric variable from 0 to 8 measuring the number of hours from 2pm (2pm = 14)
df$hour_3 <- abs(df$hour - 14)
# Plots of pedestrian against each of the hour variables.
df %>%
group_by(hour_1) %>%
summarise(mean_pedestrian = mean(pedestrians), .groups = "drop") %>%
ggplot(., aes(x = hour_1, y = mean_pedestrian)) +
geom_point() +
geom_line()
ggplot(df, aes(x = hour_2, y = pedestrians)) +
geom_boxplot()
df %>%
group_by(hour_3) %>%
summarise(mean_pedestrian = mean(pedestrians), .groups = "drop") %>%
ggplot(., aes(x = hour_3, y = mean_pedestrian)) +
geom_point() +
geom_line()
# Choose an hour variable to use in tree and GLM models
# Change the X to a number.
df$hour_tree <- df$hour_1
df$hour_glm <- df$hour_3
# Set unused hour variables to null
df$hour <- NULL
df$hour_1 <- NULL
df$hour_2 <- NULL
df$hour_3 <- NULL
# Define two different versions of the temperature variable
# temperature_1 is a numeric variable representing the hourly temperature
df$temperature_1 <- df$temperature
# temperature_2 is a numeric variable representing the predicted daily temperature.
df$temperature_2 <- df$temp_forecast
# Plots of pedestrian against each of the temperature variables
df %>%
group_by(temperature_1) %>%
summarise(mean_pedestrian = mean(pedestrians), .groups = "drop") %>%
ggplot(., aes(x = temperature_1, y = mean_pedestrian)) +
geom_point() +
geom_line()
ggplot(df, aes(x = temperature_1, y = pedestrians)) +
geom_smooth()
df %>%
mutate(temp_2_round = round(temperature_2)) %>%
group_by(temp_2_round) %>%
summarise(mean_pedestrian = mean(pedestrians), .groups = "drop") %>%
ggplot(., aes(x = temp_2_round, y = mean_pedestrian)) +
geom_point() +
geom_line()
ggplot(df, aes(x = temperature_2, y = pedestrians)) +
geom_smooth()
# Select which version of temperature to use in the tree and in the GLM.
# Replace X below to indicate your choice.
df$temperature_new <- df$temperature_2
# Set unused temperature variables to null
df$temperature <- NULL
df$temp_forecast <- NULL
df$temperature_1 <- NULL
df$temperature_2 <- NULL
# Your assistant has written the following code to illustrate the transformations.
# Transformation 1: no transformation
df$target <- df$pedestrians
ggplot(df, aes(target)) +
geom_density()
# Transformation 2: log of pedestrians
df$target <- log(df$pedestrians)
ggplot(df, aes(target)) +
geom_density()
# Transformation 3: square of pedestrians
df$target <- (df$pedestrians)^2
ggplot(df, aes(target)) +
geom_density()
# Transformation 4: square root of pedestrians
df$target <- sqrt(df$pedestrians)
ggplot(df, aes(target)) +
geom_density()
# Transformation 5: inverse of pedestrians
df$target <- 1/(df$pedestrians)
ggplot(df, aes(target)) +
geom_density()
# Target is then erased because target decisions in future tasks are made for you.
df$target <- NULL
library(caret)
set.seed(874)
# The two step process below partitions the dataset into 70/20/10 subsets. First is 70/30.
train_ind <- createDataPartition(df$pedestrians, p = 0.7, list = FALSE)
data_train <- df[train_ind, ]
data_temp <- df[-train_ind, ]
# Then 30 becomes 20/10
train_ind <- createDataPartition(data_temp$pedestrians, p = 2/3, list = FALSE)
data_test <- data_temp[train_ind, ]
data_holdout <- data_temp[-train_ind, ]
# Create similarly named dataset for all
data_all <- df
# Remove unneeded variables
rm(train_ind)
rm(data_temp)
rm(df)
# Check means of untransformed target variable
print("Mean value of pedestrians on data splits")
mean(data_all$pedestrians)
mean(data_train$pedestrians)
mean(data_test$pedestrians)
mean(data_holdout$pedestrians)
# Load the two needed libraries and set seed
library(rpart)
library(rpart.plot)
set.seed(4884)
# Build tree1, a regression tree using an untransformed target
tree1 <- rpart(pedestrians ~ . - hour_glm,
data = data_train, method = "anova",
control = rpart.control(minbucket = 50, cp = 0.0001, maxdepth = 4),
parms = list(split = "gini")
)
# Display information on this tree
tree1
rpart.plot(tree1, type = 0, digits = 4)
# Build tree2, a regression tree using a transformed target, its square root
tree2 <- rpart(sqrt(data_train$pedestrians) ~ . - pedestrians - hour_glm,
data = data_train, method = "anova",
control = rpart.control(minbucket = 50, cp = 0.0001, maxdepth = 4),
parms = list(split = "gini")
)
# Display information on this tree
tree2
rpart.plot(tree2, type = 0, digits = 4)
# Calculate test RMSE on tree1
pred.tree1 <- predict(tree1, newdata = data_test)
rmse.tree1 <- sqrt(mean((data_test$pedestrians - pred.tree1)^2))
print("Tree 1 RMSE")
rmse.tree1
# Calculate test RMSE on tree2 --> corrected from assistant's way
pred.tree2 <- predict(tree2, newdata = data_test)
rmse.tree2 <- sqrt(mean((data_test$pedestrians - pred.tree2^2)^2))
print("Tree 2 RMSE")
rmse.tree2
pred.tree2.convert <- predict(tree2, newdata= data_test)
# Fit model 1, using Poisson with log link
glm.loglink1 <- glm(pedestrians ~ . - hour_tree, family = poisson(link = "log"), data = data_train)
summary(glm.loglink1)
# Calculate RMSE on training data
pred.train.glm.loglink1 <- predict(glm.loglink1, data_train, type = "response")
print("Log link GLM 1 Train RMSE")
sqrt(sum((data_train$pedestrians - pred.train.glm.loglink1)^2) / nrow(data_train))
# Calculate RMSE on test data
pred.test.glm.loglink1 <- predict(glm.loglink1, data_test, type = "response")
print("Log link GLM 1 Test RMSE")
sqrt(sum((data_test$pedestrians - pred.test.glm.loglink1)^2) / nrow(data_test))
# Fit model 2, using a different distribution than Poisson but still using log link
# Replace DISTRIBUTION with the name of the distribution
glm.loglink2 <- glm(pedestrians ~ . - hour_tree, family = gaussian(link = "log"), data = data_train)
summary(glm.loglink2)
# Calculate RMSE on training data
pred.train.glm.loglink2 <- predict(glm.loglink2, data_train, type = "response")
print("Log link GLM 2 Train RMSE")
sqrt(sum((data_train$pedestrians - pred.train.glm.loglink2)^2) / nrow(data_train))
# Calculate RMSE on test data
pred.test.glm.loglink2 <- predict(glm.loglink2, data_test, type = "response")
print("Log link GLM 2 Test RMSE")
sqrt(sum((data_test$pedestrians - pred.test.glm.loglink2)^2) / nrow(data_test))
# This produces scatter plots of a continuous variable by the target, colored by a factor variable.
# Replace CONTINUOUS with the name of a continuous variable and FACTOR with the name of a factor variable.
ggplot(data_all, aes(x = temperature_new, y = pedestrians, color = weather)) +
geom_point(alpha = 0.5) + facet_wrap(~weather)
# Explore interaction between two factor variables with the following two graphs.
# Look at box plots with target variable on first factor variable, colored by the second factor variable
# Replace FACTOR1 and FACTOR2 with the names of different factor variables
ggplot(data_all, aes(x = weekday, y = pedestrians, fill = weather)) +
geom_boxplot()
# Same box plots but split into separate windows
# Replace FACTOR1 and FACTOR2 with the names of different factor variables
#ggplot(data_all, aes(x = FACTOR1, y = pedestrians, fill = FACTOR2)) + facet_wrap(~FACTOR2) + geom_boxplot()
# Train the GLM from before except include an interaction term of your choosing
# Replace DISTRIBUTION with the distribution chosen in Task 7. Replace INTERACTION_TERM with v1 * v2 where v1 and v2 are the names of the two variables selected for your interaction.
glm.interact <- glm(formula = pedestrians ~ . + weekday*temperature_new - hour_tree, family = gaussian(link = "log"), data = data_train)
# Summarize the GLM and interpret the coefficient(s) for the interaction term.
summary(glm.interact)
# The following code executes the stepAIC procedure allowing for forward or backward selection.
library(MASS)
# An empty GLM is needed to implement stepAIC
# Replace DISTRIBUTION below to match your choice from Task 7.
glm.none <- glm(pedestrians ~ 1, data = data_train, family = gaussian(link = "log"))
# Forward or Backward Selection. Implement one.
# Forward selection
stepAIC(glm.none,
direction = "forward",
k = log(nrow(data_train)), # This indicates BIC.
scope = list(upper = glm.interact, lower = glm.none)
)
# Backward selection
stepAIC(glm.interact,
direction = "backward",
k = log(nrow(data_train)), # This indicates BIC.
scope = list(upper = glm.interact, lower = glm.none)
)
# Run the model again
glm.stepwise <- glm(pedestrians ~ weather + precipitation + weekday + hour_glm +
temperature_new, data = data_train, family = gaussian(link = "log"))
# Calculate RMSE on training data for glm.interact model
pred.train.glm.interact <- predict(glm.interact, data_train, type = "response")
print("Log link GLM Interact Train RMSE")
sqrt(sum((data_train$pedestrians - pred.train.glm.interact)^2) / nrow(data_train))
# Calculate RMSE on test data
pred.test.glm.interact <- predict(glm.interact, data_test, type = "response")
print("Log link GLM interact Test RMSE")
sqrt(sum((data_test$pedestrians - pred.test.glm.interact)^2) / nrow(data_test))
# Calculate RMSE on training data for glm.stepwise model
pred.train.glm.stepwise <- predict(glm.stepwise, data_train, type = "response")
print("Log link GLM stepwise Train RMSE")
sqrt(sum((data_train$pedestrians - pred.train.glm.stepwise)^2) / nrow(data_train))
# Calculate RMSE on test data
pred.test.glm.stepwise <- predict(glm.stepwise, data_test, type = "response")
print("Log link GLM stepwise Test RMSE")
sqrt(sum((data_test$pedestrians - pred.test.glm.stepwise)^2) / nrow(data_test))
tree_final <- rpart(sqrt(data_all$pedestrians) ~ . - pedestrians - hour_glm,
data = data_all, method = "anova",
control = rpart.control(minbucket = 50, cp = 0.0001, maxdepth = 4),
parms = list(split = "gini")
)
# Calculate RMSE on holdout data
pred.test.tree2 <- predict(tree2, data_holdout)
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.tree2)^2) / nrow(data_holdout))
# Calculate RMSE on holdout data
pred.test.glm.stepwise <- predict(glm.stepwise, data_holdout, type = "response")
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.glm.stepwise)^2) / nrow(data_holdout))
# Calculate RMSE on holdout data
pred.test.tree1 <- predict(tree1, data_holdout)
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.tree1)^2) / nrow(data_holdout))
sqrt(mean((data$holdout$pedestrians - pred.test.tree1)^2))
# Calculate RMSE on holdout data
pred.test.tree1 <- predict(tree1, data_holdout)
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.tree1)^2) / nrow(data_holdout))
sqrt(mean((data_holdout$pedestrians - pred.test.tree1)^2))
# Calculate RMSE on holdout data
pred.test.glm.stepwise <- predict(glm.stepwise, data_holdout, type = "response")
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.glm.stepwise)^2) / nrow(data_holdout))
# Calculate RMSE on holdout data
pred.test.tree1 <- predict(tree1, data_holdout)
print("Log link Decision Tree 2 Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.tree1)^2) / nrow(data_holdout))
sqrt(mean((data_holdout$pedestrians - pred.test.tree1)^2))
# Calculate RMSE on holdout data
pred.test.glm.stepwise <- predict(glm.stepwise, data_holdout, type = "response")
print("GLM stepwise Holdout RMSE")
sqrt(sum((data_holdout$pedestrians - pred.test.glm.stepwise)^2) / nrow(data_holdout))
?read.xl
??read.xl
library(readxl)
?read_xlsx
# Changing one columns to multiple columns in R
x <- read_xlsx("/Users/apple/Downloads/Hospitals in contract CP-AP & Partners' emails_update 25062021.xlsx")
x
Countries <-x$`Area of coverage`
Countries
Countries <- read.csv(Countries, sep = "/")
?separate
library(dplyr)
?separate
separate
x
Countríe
Countries
my_list <- list(x$`Area of coverage`)
my_list
my_list[31]
my_list[[31]]
my_list[[1]]
my_list[[1]][1]
my_list[1]
x
x$`Area of coverage`
x$`Area of coverage`[1]
length(x)
length(x$Name)
str_count
library(stringr)
str_count(x$`Area of coverage`[2])
str_count(x$`Area of coverage`[2], "/")
x$`Area of coverage`[2]
str_count(x$`Area of coverage`[3], "/")
str_count(x$`Area of coverage`[4], "/")
apply(x$`Area of coverage`, 1, str_count)
dim(x)
dim(x$`Area of coverage`)
apply(x, 2, str_count)
apply(x$`Area of coverage`, 2, str_count(pattern = "/"))
str_count(x$`Area of coverage`, "/")
x<- str_count(x$`Area of coverage`, "/")
x
x +1
sum(x +1)
sum9x
sum(x)
class(x)
df <- read_xlsx("/Users/apple/Downloads/Hospitals in contract CP-AP & Partners' emails_update 25062021.xlsx")
CountriesNumber <- str_count(df$`Area of coverage`, "/") + 1
CountriesNumber
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h"),
z = c("1", "2,3,4", "5,6")
)
df
separate_rows(df, y, z, convert = TRUE)
library(tidyr)
separate_rows(df, y, z, convert = TRUE)
df <- read_xlsx("/Users/apple/Downloads/Hospitals in contract CP-AP & Partners' emails_update 25062021.xlsx")
separate_rows(df, df$`Area of coverage`, sep = "/")
df
df$Area <- df$`Area of coverage`
df$`Area of coverage` <- NULL
separate_rows(df, Area, sep = "/")
View(df)
View(df)
View(df)
View(df)
df_new <- separate_rows(df, Area, sep = "/")
View(df_new)
?write.csv
write.csv(df_new, file = "List of Countries.csv")
library(rpart)
library(rpart.plot)
set.seed(153) # because rpart uses cross-validation for estimating complexity parameter
tree.reduced <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = data.reduced,
method = "poisson",
control = rpart.control(minbucket = 25,
cp = 0,
maxdepth = 10))
library(caret)
set.seed(1234)
partition <- createDataPartition(data.frame$FEATURE, list = FALSE, p = .80)
library(caret)
set.seed(1234)
partition <- createDataPartition(data.frame$FEATURE, list = FALSE, p = .80)
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
head(data.frame)
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
data.frame <- read.csv("MSHA_Mine_Data_2013_2016.csv")
head(data.frame)
data.frame <- read.csv("/Users/apple/Downloads/PADec2018/MSHA_Mine_Data_2013-2016.csv")
library(caret)
set.seed(1234)
partition <- createDataPartition(data.frame$FEATURE, list = FALSE, p = .80)
head(data.frame)
library(caret)
set.seed(1234)
partition <- createDataPartition(data.frame$NUM_INJURIES, list = FALSE, p = .80)
train <- data.frame[partition, ]
test <- data.frame[-partition, ]
# replace "data.frame" with the name of your dataframe (3 times)
# replace "FEATURE" with the target variable
# The proportion that goes to the training set need not be .80
# Consider giving more intuitive names to the two sets created here
# Import data from WHO
WHO_data <- read.csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv")
View(WHO_data)
# Import data from WHO
WHO_data <- read.csv("https://covid19.who.int/WHO-COVID-19-global-table-data.csv")
?read.csv2
# Import data from WHO
WHO_data <- read.csv("https://covid19.who.int/WHO-COVID-19-global-table-data.csv", header = TRUE)
View(WHO_data)
# Import data from WHO
WHO_data <- read.csv("https://covid19.who.int/WHO-COVID-19-global-table-data.csv", header = FALSE, skip = 1)
View(WHO_data)
# Import data from WHO
WHO_data <- read.csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv")
View(WHO_data)
# Import data from WHO
WHO_data <- read_csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv")
library(readr)
# Import data from WHO
WHO_data <- read_csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv")
WHO_data
View(WHO_data)
shiny::runApp('R studying/COVID RISK RATING')
runApp('R studying/COVID RISK RATING')
# Import data from WHO
WHO_data <- read.csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv")
View(WHO_data)
# Import data from WHO
WHO_data <- read.csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv", skip = 1)
View(WHO_data)
# Import data from WHO
WHO_data <- read.csv("/Users/apple/Downloads/WHO-COVID-19-global-table-data.csv", skip = 1, header = FALSE)
View(WHO_data)
?gsub
file <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
rows <- readLines(file)
rows[2] <- gsub(",$", "", rows[2])
WHO_data  <- read.csv(text=rows)
View(WHO_data)
shiny::runApp('R studying/COVID RISK RATING')
shiny::runApp('R studying/COVID RISK RATING')
library(readr)
runApp('R studying/COVID RISK RATING')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?gsub
grep("Annual premium", x)
?grep
grep("\d\d",x)
grep("\d", )
grep("\d", x)
source('~/.active-rstudio-document', echo=TRUE)
library(readtext)
`1CVietnam` <- read.table("~/Downloads/1CVietnam.rtf", quote="\"")
View(`1CVietnam`)
x <- readChar("/Users/apple/Downloads/1CVietnam.rtf")
source('~/.active-rstudio-document', echo=TRUE)
x
source('~/.active-rstudio-document', echo=TRUE)
x
?str_extract
?str_extract()
?`regular expression`
?regexpr()
regexpr("\d\d,\d\d\d,\d\d\d.\d\d", x)
regexpr("Norka", x)
grep("[a-z]", letters)
txt <- c("arm","foot","lefroo", "bafoobar")
if(length(i <- grep("foo", "bafoobar")))
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
txt <- c("arm","foot","lefroo", "bafoobar")
grep("foo", txt)
grep("foo", txt, fixed = TRUE)
if(length(i <- grep("foo", txt)))
cat("foo' appears at least once in \n\t", "\n")
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
i # 2 and 4
txt{i}
txt[i]
gsub("([ab])", "\\1_", "abc and ABC")
gsub("([ab])", "\\1_")
gsub("([ab])", "\\1_", "abc and ABC")
```{r}
df <- read.csv("2019-06-13-exam-pa-data-file.csv")
?read.csv
df <- read.csv(2019-06-13-exam-pa-data-file.csv)
df <- read.csv("2019-06-13-exam-pa-data-file.csv")
read.csv("2019-06-13-exam-pa-data-file.csv")
cwd
os.cwd
getwd
getwd()
setwd("Crash Score Project")
setwd("/Users/apple/R studying/Crash Score project")
df <- read.csv("2019-06-13-exam-pa-data-file.csv")
head(df)
summary(df)
View(df)
sum(is.na(df$Crash_Score))
summary(df)
for (i in names(df)) {
print(i)
sum(is.na(df[ ,i]))
}
for (i in names(df)) {
print(i)
print(sum(is.na(df[ ,i])))
}
typeof(df)
for (i in names(df)) {}
for (in in names(df)) {typeof(df[ ,i])}
for (i in names(df)) {typeof(df[ ,i])}
for (i in names(df)) {print(typeof(df[ ,i]))}
View(data_train)
?ggplot
library(ggplot2)
?ggplot
library(ggplot2)
ggplot(data = df, aes(x = Crash_Score)+
geom_bar)
?geom_bar
